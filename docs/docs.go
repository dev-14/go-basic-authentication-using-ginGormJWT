// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/admin/create": {
            "post": {
                "description": "API Endpoint to register the user with the role of Supervisor or Admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "CreateAdmin endpoint is used by the admin role user to create a new admin or supervisor account.",
                "parameters": [
                    {
                        "type": "string",
                        "name": "confirmpassword",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/auth/books/": {
            "get": {
                "description": "API Endpoint to register the user with the role of Supervisor or Admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "ListAllBook endpoint is used to list all book."
            }
        },
        "/api/v1/auth/books/:id/": {
            "get": {
                "description": "GetBook endpoint is used to get info of a book.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "GetBook endpoint is used to get info of a book.."
            },
            "patch": {
                "description": "Updatebook endpoint is used by the supervisor role user to update a new book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "UpdateBook endpoint is used by the supervisor role user to update a new book."
            }
        },
        "/api/v1/auth/books/create": {
            "post": {
                "description": "CreateBook endpoint is used by the supervisor role user to create a new book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "CreateBook endpoint is used by the supervisor role user to create a new book.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the book",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "category_id of the book",
                        "name": "category_id",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/auth/books/delete/:id/": {
            "delete": {
                "description": "DeleteBook endpoint is used to delete a book.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "DeleteBook endpoint is used to delete a book."
            }
        },
        "/api/v1/auth/cart/add": {
            "post": {
                "description": "AddToCart endpoint is used to add the book to the cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "AddToCart endpoint is used to add the book to the cart.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "title of the book",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/auth/cart/delete/:id/": {
            "delete": {
                "description": "DeleteFromCart endpoint is used to delete book from cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "DeleteFromCart endpoint is used to delete book from cart."
            }
        },
        "/api/v1/auth/cart/view": {
            "get": {
                "description": "API Endpoint to view the cart items.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "ViewCart endpoint is used to list all book."
            }
        },
        "/api/v1/auth/category/": {
            "get": {
                "description": "ListAllCategories endpoint is used to list all the categories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "ListAllCategories endpoint is used to list all the categories."
            }
        },
        "/api/v1/auth/category/:id/": {
            "get": {
                "description": "GetCategory endpoint is used to get info of a category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "GetCategory endpoint is used to get info of a category.."
            },
            "put": {
                "description": "UpdateCategory endpoint is used to get info of a category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "UpdateCategory endpoint is used to get info of a category.."
            }
        },
        "/api/v1/auth/category/create": {
            "post": {
                "description": "CreateCategory endpoint is used by admin to create category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "CreateCategory endpoint is used by admin to create category.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the category",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/auth/product/:id/image/upload": {
            "post": {
                "description": "API Endpoint to register the user with the role of Supervisor or Admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "UploadProductImages endpoint is used to add images to product."
            }
        },
        "/api/v1/auth/supervisor/create": {
            "post": {
                "description": "API Endpoint to register the user with the role of Supervisor or Admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supervisor"
                ],
                "summary": "CreateSupervisor endpoint is used by the admin role user to create a new admin or supervisor account.",
                "parameters": [
                    {
                        "type": "string",
                        "name": "confirmpassword",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "API Endpoint to register the user with the role of customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login endpoint is used by the user to login.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "email id",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "description"
                        }
                    }
                }
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "API Endpoint to register the user with the role of customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "register endpoint is used for customer registration. ( Supervisors/admin can be added only by admin. )",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password of the user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Confirm password.",
                        "name": "confirm_password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Login System",
	Description: "Golang basic API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
